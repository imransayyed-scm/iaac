AWSTemplateFormatVersion: '2010-09-09'
Description: |
  Deploys an SSM Automation Document that scans all SSM-managed EC2 instances without reboot, uploads per-instance patch compliance data to an S3 bucket via a Lambda function, and logs results.

Parameters:
  S3BucketName:
    Type: String
    Default: pchfl-ssm-patching-artifacts-3p-uat
    Description: S3 bucket name for storing patch scan reports

Resources:

  SSMScanAutomationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SSMScanAutomationRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ssm.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SSMScanPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:DescribeInstanceInformation
                  - ssm:DescribeInstancePatchStates
                  - ssm:SendCommand
                  - ssm:ListCommands
                  - ssm:GetCommandInvocation
                  - ec2:DescribeInstances
                  - s3:PutObject
                  - lambda:InvokeFunction
                Resource: '*'

  UploadPatchScanReportLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: UploadPatchScanReportLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: UploadToS3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub arn:aws:s3:::${S3BucketName}/*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  UploadPatchScanReportToS3:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: UploadPatchScanReportToS3
      Runtime: python3.12
      Role: !GetAtt UploadPatchScanReportLambdaRole.Arn
      Handler: index.lambda_handler
      Timeout: 60
      Code:
        ZipFile: |
          import json
          import boto3
          import datetime

          def lambda_handler(event, context):
              s3 = boto3.client('s3')
              bucket_name = event['BucketName']
              compliance_data = event['PatchCompliance']
              timestamp = datetime.datetime.utcnow().strftime("%Y-%m-%dT%H-%M-%SZ")
              key = f"patch-scan-report-{timestamp}.json"

              if isinstance(compliance_data, str):
                  compliance_data = json.loads(compliance_data)

              s3.put_object(
                  Bucket=bucket_name,
                  Key=key,
                  Body=json.dumps(compliance_data, indent=2)
              )

              return {
                  'statusCode': 200,
                  'body': f'Report uploaded to s3://{bucket_name}/{key}'
              }

  PatchScanSSMDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Name: ScanAllEC2Instances-NoReboot-S3Upload
      Content:
        schemaVersion: '0.3'
        description: |
          Scans all Systems Manager managed EC2 instances for missing patches using Patch Manager without rebooting. Logs patch compliance per instance and uploads the results to an S3 bucket.
        assumeRole: '{{ AutomationAssumeRole }}'
        parameters:
          AutomationAssumeRole:
            type: String
            description: IAM role for SSM automation execution
          S3BucketName:
            type: String
            description: S3 bucket for uploading patch scan reports
        mainSteps:
          - name: getManagedInstances
            action: aws:executeAwsApi
            inputs:
              Service: ssm
              Api: DescribeInstanceInformation
            outputs:
              - Name: InstanceIds
                Selector: $..InstanceId
                Type: StringList

          - name: runPatchScan
            action: aws:runCommand
            inputs:
              DocumentName: AWS-RunPatchBaseline
              InstanceIds: '{{ getManagedInstances.InstanceIds }}'
              Parameters:
                Operation: Scan
                RebootOption: NoReboot
            timeoutSeconds: 600

          - name: getComplianceData
            action: aws:executeAwsApi
            inputs:
              Service: ssm
              Api: DescribeInstancePatchStates
              InstanceIds: '{{ getManagedInstances.InstanceIds }}'
            outputs:
              - Name: PatchCompliance
                Selector: $
                Type: String

          - name: logCompliance
            action: aws:invokeLambdaFunction
            inputs:
              FunctionName: UploadPatchScanReportToS3
              Payload: !Sub |
                {
                  "PatchCompliance": "{{ getComplianceData.PatchCompliance }}",
                  "BucketName": "${S3BucketName}"
                }

Outputs:
  SSMDocumentName:
    Description: Name of the SSM Automation Document
    Value: !Ref PatchScanSSMDocument

  AutomationRoleARN:
    Description: ARN of the IAM role for executing the SSM Automation
    Value: !GetAtt SSMScanAutomationRole.Arn

  LambdaFunctionName:
    Description: Name of the Lambda function that uploads compliance results to S3
    Value: !Ref UploadPatchScanReportToS3
