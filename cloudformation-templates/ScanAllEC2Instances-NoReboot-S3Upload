AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Deploys an SSM Automation Document to scan all SSM-managed EC2 instances without reboot,
  log per-instance patch compliance data, and upload results to a specific S3 bucket.

Parameters:
  S3BucketName:
    Type: String
    Default: "pchfl-ssm-patching-artifacts-3p-uat"
    Description: S3 bucket name for storing patch scan reports

Resources:

  SSMScanAutomationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SSMScanAutomationRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ssm.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SSMScanPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:DescribeInstanceInformation
                  - ssm:DescribeInstancePatchStates
                  - ssm:SendCommand
                  - ssm:GetCommandInvocation
                  - ec2:DescribeInstances
                  - s3:PutObject
                Resource: "*"

  PatchScanSSMDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Name: ScanAllEC2Instances-NoReboot-S3Upload
      Content:
        schemaVersion: '0.3'
        description: >
          Scans all Systems Manager managed EC2 instances for missing patches using Patch Manager without rebooting.
          Logs patch compliance per instance and uploads the results to an S3 bucket.
        assumeRole: '{{ AutomationAssumeRole }}'
        parameters:
          AutomationAssumeRole:
            type: String
            description: IAM role for SSM automation execution
          S3BucketName:
            type: String
            description: S3 bucket for uploading patch scan reports
        mainSteps:
          - name: getManagedInstances
            action: aws:executeAwsApi
            inputs:
              Service: ssm
              Api: DescribeInstanceInformation
            outputs:
              - Name: InstanceIds
                Selector: "$..InstanceId"
                Type: StringList

          - name: runPatchScan
            action: aws:runCommand
            inputs:
              DocumentName: AWS-RunPatchBaseline
              InstanceIds: "{{ getManagedInstances.InstanceIds }}"
              Parameters:
                Operation: "Scan"
                RebootOption: "NoReboot"
            timeoutSeconds: 600

          - name: getComplianceData
            action: aws:executeAwsApi
            inputs:
              Service: ssm
              Api: DescribeInstancePatchStates
              InstanceIds: "{{ getManagedInstances.InstanceIds }}"
            outputs:
              - Name: PatchCompliance
                Selector: "$"
                Type: String

          - name: logCompliance
            action: aws:invokeLambdaFunction
            inputs:
              FunctionName: UploadPatchScanReportToS3
              Payload: !Sub |
                {
                  "PatchCompliance": "{{ getComplianceData.PatchCompliance }}",
                  "BucketName": "${S3BucketName}"
                }

Outputs:
  SSMDocumentName:
    Description: Name of the SSM Automation Document
    Value: !Ref PatchScanSSMDocument

  AutomationRoleARN:
    Description: ARN of the IAM role for executing the SSM Automation
    Value: !GetAtt SSMScanAutomationRole.Arn
