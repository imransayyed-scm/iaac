AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Lambda to patch EC2 instances with PatchScanAutomation=SSM tag if found non-compliant.

Resources:

  PatchLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: PatchComplianceLambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: PatchLambdaInlinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:DescribeInstancePatchStates
                  - ssm:SendCommand
                  - ssm:GetCommandInvocation
                  - ssm:ListCommandInvocations
                  - ec2:DescribeInstances
                  - ses:SendEmail
                Resource: "*"

  PatchComplianceLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: PatchNonCompliantEC2Instances
      Handler: index.lambda_handler
      Runtime: python3.9
      Role: !GetAtt PatchLambdaExecutionRole.Arn
      Timeout: 300
      Code:
        ZipFile: |
          import boto3
          import json

          ssm_client = boto3.client('ssm')
          ec2_client = boto3.client('ec2')

          def get_instances_with_tag(tag_key, tag_value):
              filters = [
                  {'Name': f'tag:{tag_key}', 'Values': [tag_value]},
                  {'Name': 'instance-state-name', 'Values': ['running']}
              ]
              response = ec2_client.describe_instances(Filters=filters)
              instance_ids = []
              for reservation in response['Reservations']:
                  for instance in reservation['Instances']:
                      instance_ids.append(instance['InstanceId'])
              return instance_ids

          def lambda_handler(event, context):
              tagged_instances = get_instances_with_tag('PatchDeployAutomation', 'Enabled')
              print(f"Tagged instances: {tagged_instances}")

              if not tagged_instances:
                  return {
                      'statusCode': 200,
                      'body': json.dumps('No tagged instances found.')
                  }

              compliant_states = ssm_client.describe_instance_patch_states(InstanceIds=tagged_instances)
              non_compliant_instances = [
                  state['InstanceId']
                  for state in compliant_states['InstancePatchStates']
                  if state.get('CriticalNonCompliantCount', 0) > 0 or
                     state.get('SecurityNonCompliantCount', 0) > 0
              ]

              print(f"Non-compliant instances: {non_compliant_instances}")

              if not non_compliant_instances:
                  return {
                      'statusCode': 200,
                      'body': json.dumps('All tagged instances are compliant.')
                  }

              command_response = ssm_client.send_command(
                  InstanceIds=non_compliant_instances,
                  DocumentName='AWS-RunPatchBaseline',
                  Parameters={'Operation': ['Install']},
                  TimeoutSeconds=600,
                  Comment='Triggered by Lambda: Patch non-compliant instances',
              )

              return {
                  'statusCode': 200,
                  'body': json.dumps({
                      'message': 'Patching started for non-compliant instances.',
                      'commandId': command_response['Command']['CommandId'],
                      'instances': non_compliant_instances
                  })
              }

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${PatchComplianceLambda}"
      RetentionInDays: 7

Outputs:
  LambdaFunctionName:
    Description: Name of the Lambda function
    Value: !Ref PatchComplianceLambda
