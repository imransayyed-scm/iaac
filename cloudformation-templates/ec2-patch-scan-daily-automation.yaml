AWSTemplateFormatVersion: '2010-09-09'
Description: EC2 Patch Scan Automation with SES Email Notifications

Resources:

  PatchScanS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ec2-patch-automation

  PatchScanDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: SubscribedEmails
      AttributeDefinitions:
        - AttributeName: Email
          AttributeType: S
      KeySchema:
        - AttributeName: Email
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  PatchScanLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: PatchScanLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: PatchScanLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ssm:SendCommand
                  - ssm:DescribeInstancePatchStates
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - s3:PutObject
                  - ses:SendEmail
                Resource: '*'

  PatchScanLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: PatchScanEmailer
      Handler: index.lambda_handler
      Runtime: python3.12
      Role: !GetAtt PatchScanLambdaRole.Arn
      Timeout: 300
      Environment:
        Variables:
          DDB_TABLE_NAME: !Ref PatchScanDynamoDB
          S3_BUCKET_NAME: !Ref PatchScanS3Bucket
          SES_SENDER: noreply@piramal.info
      Code:
        ZipFile: |
          import boto3
          import os
          import json
          import datetime
          import time
          import botocore

          ec2 = boto3.client('ec2')
          ssm = boto3.client('ssm')
          ddb = boto3.client('dynamodb')
          s3 = boto3.client('s3')
          ses = boto3.client('ses', region_name='ap-south-1')

          DDB_TABLE_NAME = os.environ['DDB_TABLE_NAME']
          S3_BUCKET_NAME = os.environ['S3_BUCKET_NAME']
          SES_SENDER = os.environ['SES_SENDER']

          def is_email_subscribed(email):
              try:
                  response = ddb.get_item(
                      TableName=DDB_TABLE_NAME,
                      Key={'Email': {'S': email}}
                  )
                  return 'Item' in response
              except Exception as e:
                  print(f"DynamoDB check error for {email}: {e}")
                  return False

          def lambda_handler(event, context):
              today = datetime.datetime.now().strftime("%Y-%m-%d")

              instances = ec2.describe_instances(
                  Filters=[
                      {'Name': 'tag:PatchScanAutomation', 'Values': ['Enabled']},
                      {'Name': 'tag:PatchScanAutomationWindow', 'Values': ['Daily']}
                  ]
              )

              instance_ids = []
              instance_map = {}

              for r in instances['Reservations']:
                  for inst in r['Instances']:
                      iid = inst['InstanceId']
                      tags = {t['Key']: t['Value'] for t in inst.get('Tags', [])}
                      email = tags.get('PatchScanEmailAlert')
                      if email and "@" in email:
                          instance_ids.append(iid)
                          instance_map[iid] = {'email': email, 'tags': tags}

              if not instance_ids:
                  print("No matching instances found.")
                  return

              ssm.send_command(
                  InstanceIds=instance_ids,
                  DocumentName="AWS-RunPatchBaseline",
                  Parameters={"Operation": ["Scan"]}
              )

              time.sleep(20)

              results = {}
              for iid in instance_ids:
                  try:
                      state = ssm.describe_instance_patch_states(InstanceIds=[iid])['InstancePatchStates'][0]
                      results[iid] = {
                          'ComplianceStatus': state.get('PatchComplianceStatus'),
                          'MissingCount': state.get('MissingCount'),
                          'OperationStartTime': state.get('OperationStartTime').isoformat(),
                          'OperationEndTime': state.get('OperationEndTime').isoformat()
                      }
                  except Exception as e:
                      print(f"Patch state error for {iid}: {e}")

              s3_key = f"scans/{today}-scan-results.json"
              try:
                  s3.put_object(
                      Bucket=S3_BUCKET_NAME,
                      Key=s3_key,
                      Body=json.dumps(results, indent=2),
                      ContentType="application/json"
                  )
              except Exception as e:
                  print(f"S3 upload error: {e}")

              for iid, data in results.items():
                  email = instance_map[iid]['email']
                  body = json.dumps({iid: data}, indent=2)

                  if not is_email_subscribed(email):
                      try:
                          ddb.put_item(TableName=DDB_TABLE_NAME, Item={'Email': {'S': email}})
                      except Exception as e:
                          print(f"Error saving {email} to DynamoDB: {e}")

                  try:
                      ses.send_email(
                          Source=SES_SENDER,
                          Destination={'ToAddresses': [email]},
                          Message={
                              'Subject': {'Data': f"Patch Scan Result for {iid}"},
                              'Body': {'Text': {'Data': body}}
                          }
                      )
                      print(f"Sent patch result for {iid} to {email}")
                  except botocore.exceptions.ClientError as e:
                      print(f"SES error for {iid}: {e.response['Error']['Message']}")

  PatchScanLambdaSchedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(45 9 ? * 2-5 *) # 3:15 PM IST
      Targets:
        - Arn: !GetAtt PatchScanLambda.Arn
          Id: PatchScanLambdaTarget
      State: ENABLED

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PatchScanLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt PatchScanLambdaSchedule.Arn
