AWSTemplateFormatVersion: '2010-09-09'
Description: Daily EC2 Patch Scan with Email Alert using Lambda, SES, SSM, and S3

Parameters:
  SESVerifiedSender:
    Type: String
    Default: noreply@piramal.info
    Description: Verified SES email address to send from

Resources:

  PatchScanS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ec2-patch-automation

  PatchScanDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: PatchScanEmailState
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: InstanceId
          AttributeType: S
      KeySchema:
        - AttributeName: InstanceId
          KeyType: HASH

  PatchScanLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: PatchScanLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: PatchScanLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ssm:DescribeInstancePatchStates
                  - ssm:DescribeInstanceInformation
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub arn:aws:s3:::ec2-patch-automation/scans/*
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                Resource: !GetAtt PatchScanDynamoDB.Arn
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  PatchScanLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: PatchScanLambda
      Handler: index.lambda_handler
      Runtime: python3.12
      Timeout: 300
      Role: !GetAtt PatchScanLambdaRole.Arn
      Environment:
        Variables:
          S3_BUCKET_NAME: ec2-patch-automation
          SES_FROM: !Ref SESVerifiedSender
          DDB_TABLE_NAME: PatchScanEmailState
      Code:
        ZipFile: |
          import boto3, os, json
          from datetime import datetime
          from botocore.exceptions import ClientError

          ec2 = boto3.client('ec2')
          ssm = boto3.client('ssm')
          ses = boto3.client('ses')
          ddb = boto3.client('dynamodb')

          def lambda_handler(event, context):
              instance_ids = []
              instance_map = {}

              reservations = ec2.describe_instances(
                  Filters=[
                      {'Name': 'tag:PatchScanAutomation', 'Values': ['Enabled']},
                      {'Name': 'tag:PatchScanAutomationWindow', 'Values': ['Daily']},
                      {'Name': 'instance-state-name', 'Values': ['running']}
                  ]
              )

              for r in reservations['Reservations']:
                  for inst in r['Instances']:
                      iid = inst['InstanceId']
                      tags = {t['Key']: t['Value'] for t in inst.get('Tags', [])}
                      email = tags.get('PatchScanEmailAlert')
                      if email and "@" in email:
                          instance_ids.append(iid)
                          instance_map[iid] = {
                              'email': email,
                              'hostname': inst.get('PrivateDnsName', 'N/A'),
                              'private_ip': inst.get('PrivateIpAddress', 'N/A')
                          }

              if not instance_ids:
                  return {"message": "No tagged instances found."}

              response = ssm.describe_instance_patch_states(InstanceIds=instance_ids)
              results = {}

              for state in response['InstancePatchStates']:
                  iid = state['InstanceId']
                  email = instance_map[iid]['email']
                  hostname = instance_map[iid]['hostname']
                  private_ip = instance_map[iid]['private_ip']

                  missing = state.get('MissingCount', 0)
                  compliance = state.get('ComplianceStatus', 'Unknown')
                  start_time = state.get('OperationStartTime')
                  end_time = state.get('OperationEndTime')

                  results[iid] = {
                      'Hostname': hostname,
                      'PrivateIP': private_ip,
                      'MissingCount': missing,
                      'ComplianceStatus': compliance,
                      'OperationStartTime': str(start_time),
                      'OperationEndTime': str(end_time)
                  }

                  body = (
                      f"Patch Scan Result:\n\n"
                      f"Instance ID: {iid}\n"
                      f"Hostname: {hostname}\n"
                      f"Private IP: {private_ip}\n"
                      f"Missing Patches: {missing}\n"
                      f"Compliance Status: {compliance}\n"
                      f"Operation Time: {start_time} to {end_time} UTC\n"
                  )

                  try:
                      ses.send_email(
                          Source=os.environ['SES_FROM'],
                          Destination={'ToAddresses': [email]},
                          Message={
                              'Subject': {'Data': f'Patch Scan Report for {iid}'},
                              'Body': {'Text': {'Data': body}}
                          }
                      )
                  except ClientError as e:
                      print(f"SES error for {iid}: {e.response['Error']['Message']}")

                  # Store latest state to DynamoDB
                  try:
                      ddb.put_item(
                          TableName=os.environ['DDB_TABLE_NAME'],
                          Item={
                              'InstanceId': {'S': iid},
                              'LastEmailSent': {'S': datetime.utcnow().isoformat()}
                          }
                      )
                  except Exception as e:
                      print(f"DynamoDB put error for {iid}: {str(e)}")

              # Save to S3
              s3 = boto3.client('s3')
              s3.put_object(
                  Bucket=os.environ['S3_BUCKET_NAME'],
                  Key=f'scans/{datetime.utcnow().strftime("%y-%m-%d")}-scan-results.json',
                  Body=json.dumps(results, indent=2)
              )

              return {"status": "Scan completed", "instances": len(instance_ids)}

  PatchScanSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: PatchScanLambdaSchedule
      ScheduleExpression: cron(00 11 ? * 2-5 *)  # 4:30 PM IST = 15:15 UTC, Mon-Thu
      State: ENABLED
      Targets:
        - Arn: !GetAtt PatchScanLambda.Arn
          Id: TargetFunctionV1

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PatchScanLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt PatchScanSchedule.Arn

Outputs:
  LambdaName:
    Value: !Ref PatchScanLambda
  S3Bucket:
    Value: !Ref PatchScanS3Bucket
  Schedule:
    Value: "Mon?Thu at 8:45 PM IST"
